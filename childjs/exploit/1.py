from pwn import *
import sys, random, string, struct
from hashlib import sha256

def proof_of_work_okay(chall, solution, hardness):
    h = sha256(chall.encode('ASCII') + struct.pack('<Q', solution)).hexdigest()
    return int(h, 16) < 2**256 / hardness

def random_string(length = 10):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

def solve_proof_of_work(task):
    hardness, task = task.split('_')
    hardness = int(hardness)

    ''' You can use this to solve the proof of work. '''
    print('Creating proof of work for {} (hardness {})'.format(task, hardness))
    i = 0
    while True:
        if i % 1000000 == 0: print('Progress: %d' % i)
        if proof_of_work_okay(task, i, hardness):
            return i
        i += 1

io = remote('49.4.122.46', 1337)
io.recvuntil(' ./pow.py ')
task = io.recvuntil('\n')[:-1]

ans = solve_proof_of_work(task)
io.recvuntil('response? ')
io.sendline(str(ans))

# send team token
io.recvuntil('token: ')
io.sendline('a' * 32)

# send code
with open('./exp.js', 'r') as f:
    lines = f.readlines()

for line in lines:
    io.recvuntil('code> ')
    io.send(line)

io.sendline('EOF')

io.interactive()



